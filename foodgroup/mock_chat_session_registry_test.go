// Code generated by mockery v2.53.5. DO NOT EDIT.

package foodgroup

import (
	context "context"

	state "github.com/mk6i/retro-aim-server/state"
	mock "github.com/stretchr/testify/mock"
)

// mockChatSessionRegistry is an autogenerated mock type for the ChatSessionRegistry type
type mockChatSessionRegistry struct {
	mock.Mock
}

type mockChatSessionRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *mockChatSessionRegistry) EXPECT() *mockChatSessionRegistry_Expecter {
	return &mockChatSessionRegistry_Expecter{mock: &_m.Mock}
}

// AddSession provides a mock function with given fields: ctx, chatCookie, screenName
func (_m *mockChatSessionRegistry) AddSession(ctx context.Context, chatCookie string, screenName state.DisplayScreenName) (*state.Session, error) {
	ret := _m.Called(ctx, chatCookie, screenName)

	if len(ret) == 0 {
		panic("no return value specified for AddSession")
	}

	var r0 *state.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, state.DisplayScreenName) (*state.Session, error)); ok {
		return rf(ctx, chatCookie, screenName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, state.DisplayScreenName) *state.Session); ok {
		r0 = rf(ctx, chatCookie, screenName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, state.DisplayScreenName) error); ok {
		r1 = rf(ctx, chatCookie, screenName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockChatSessionRegistry_AddSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSession'
type mockChatSessionRegistry_AddSession_Call struct {
	*mock.Call
}

// AddSession is a helper method to define mock.On call
//   - ctx context.Context
//   - chatCookie string
//   - screenName state.DisplayScreenName
func (_e *mockChatSessionRegistry_Expecter) AddSession(ctx interface{}, chatCookie interface{}, screenName interface{}) *mockChatSessionRegistry_AddSession_Call {
	return &mockChatSessionRegistry_AddSession_Call{Call: _e.mock.On("AddSession", ctx, chatCookie, screenName)}
}

func (_c *mockChatSessionRegistry_AddSession_Call) Run(run func(ctx context.Context, chatCookie string, screenName state.DisplayScreenName)) *mockChatSessionRegistry_AddSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(state.DisplayScreenName))
	})
	return _c
}

func (_c *mockChatSessionRegistry_AddSession_Call) Return(_a0 *state.Session, _a1 error) *mockChatSessionRegistry_AddSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockChatSessionRegistry_AddSession_Call) RunAndReturn(run func(context.Context, string, state.DisplayScreenName) (*state.Session, error)) *mockChatSessionRegistry_AddSession_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveSession provides a mock function with given fields: sess
func (_m *mockChatSessionRegistry) RemoveSession(sess *state.Session) {
	_m.Called(sess)
}

// mockChatSessionRegistry_RemoveSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveSession'
type mockChatSessionRegistry_RemoveSession_Call struct {
	*mock.Call
}

// RemoveSession is a helper method to define mock.On call
//   - sess *state.Session
func (_e *mockChatSessionRegistry_Expecter) RemoveSession(sess interface{}) *mockChatSessionRegistry_RemoveSession_Call {
	return &mockChatSessionRegistry_RemoveSession_Call{Call: _e.mock.On("RemoveSession", sess)}
}

func (_c *mockChatSessionRegistry_RemoveSession_Call) Run(run func(sess *state.Session)) *mockChatSessionRegistry_RemoveSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*state.Session))
	})
	return _c
}

func (_c *mockChatSessionRegistry_RemoveSession_Call) Return() *mockChatSessionRegistry_RemoveSession_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockChatSessionRegistry_RemoveSession_Call) RunAndReturn(run func(*state.Session)) *mockChatSessionRegistry_RemoveSession_Call {
	_c.Run(run)
	return _c
}

// newMockChatSessionRegistry creates a new instance of mockChatSessionRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockChatSessionRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockChatSessionRegistry {
	mock := &mockChatSessionRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

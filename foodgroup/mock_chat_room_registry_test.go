// Code generated by mockery v2.53.5. DO NOT EDIT.

package foodgroup

import (
	context "context"

	state "github.com/mk6i/retro-aim-server/state"
	mock "github.com/stretchr/testify/mock"
)

// mockChatRoomRegistry is an autogenerated mock type for the ChatRoomRegistry type
type mockChatRoomRegistry struct {
	mock.Mock
}

type mockChatRoomRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *mockChatRoomRegistry) EXPECT() *mockChatRoomRegistry_Expecter {
	return &mockChatRoomRegistry_Expecter{mock: &_m.Mock}
}

// ChatRoomByCookie provides a mock function with given fields: ctx, chatCookie
func (_m *mockChatRoomRegistry) ChatRoomByCookie(ctx context.Context, chatCookie string) (state.ChatRoom, error) {
	ret := _m.Called(ctx, chatCookie)

	if len(ret) == 0 {
		panic("no return value specified for ChatRoomByCookie")
	}

	var r0 state.ChatRoom
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (state.ChatRoom, error)); ok {
		return rf(ctx, chatCookie)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) state.ChatRoom); ok {
		r0 = rf(ctx, chatCookie)
	} else {
		r0 = ret.Get(0).(state.ChatRoom)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, chatCookie)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockChatRoomRegistry_ChatRoomByCookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChatRoomByCookie'
type mockChatRoomRegistry_ChatRoomByCookie_Call struct {
	*mock.Call
}

// ChatRoomByCookie is a helper method to define mock.On call
//   - ctx context.Context
//   - chatCookie string
func (_e *mockChatRoomRegistry_Expecter) ChatRoomByCookie(ctx interface{}, chatCookie interface{}) *mockChatRoomRegistry_ChatRoomByCookie_Call {
	return &mockChatRoomRegistry_ChatRoomByCookie_Call{Call: _e.mock.On("ChatRoomByCookie", ctx, chatCookie)}
}

func (_c *mockChatRoomRegistry_ChatRoomByCookie_Call) Run(run func(ctx context.Context, chatCookie string)) *mockChatRoomRegistry_ChatRoomByCookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockChatRoomRegistry_ChatRoomByCookie_Call) Return(_a0 state.ChatRoom, _a1 error) *mockChatRoomRegistry_ChatRoomByCookie_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockChatRoomRegistry_ChatRoomByCookie_Call) RunAndReturn(run func(context.Context, string) (state.ChatRoom, error)) *mockChatRoomRegistry_ChatRoomByCookie_Call {
	_c.Call.Return(run)
	return _c
}

// ChatRoomByName provides a mock function with given fields: ctx, exchange, name
func (_m *mockChatRoomRegistry) ChatRoomByName(ctx context.Context, exchange uint16, name string) (state.ChatRoom, error) {
	ret := _m.Called(ctx, exchange, name)

	if len(ret) == 0 {
		panic("no return value specified for ChatRoomByName")
	}

	var r0 state.ChatRoom
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint16, string) (state.ChatRoom, error)); ok {
		return rf(ctx, exchange, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint16, string) state.ChatRoom); ok {
		r0 = rf(ctx, exchange, name)
	} else {
		r0 = ret.Get(0).(state.ChatRoom)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint16, string) error); ok {
		r1 = rf(ctx, exchange, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockChatRoomRegistry_ChatRoomByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChatRoomByName'
type mockChatRoomRegistry_ChatRoomByName_Call struct {
	*mock.Call
}

// ChatRoomByName is a helper method to define mock.On call
//   - ctx context.Context
//   - exchange uint16
//   - name string
func (_e *mockChatRoomRegistry_Expecter) ChatRoomByName(ctx interface{}, exchange interface{}, name interface{}) *mockChatRoomRegistry_ChatRoomByName_Call {
	return &mockChatRoomRegistry_ChatRoomByName_Call{Call: _e.mock.On("ChatRoomByName", ctx, exchange, name)}
}

func (_c *mockChatRoomRegistry_ChatRoomByName_Call) Run(run func(ctx context.Context, exchange uint16, name string)) *mockChatRoomRegistry_ChatRoomByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint16), args[2].(string))
	})
	return _c
}

func (_c *mockChatRoomRegistry_ChatRoomByName_Call) Return(_a0 state.ChatRoom, _a1 error) *mockChatRoomRegistry_ChatRoomByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockChatRoomRegistry_ChatRoomByName_Call) RunAndReturn(run func(context.Context, uint16, string) (state.ChatRoom, error)) *mockChatRoomRegistry_ChatRoomByName_Call {
	_c.Call.Return(run)
	return _c
}

// CreateChatRoom provides a mock function with given fields: ctx, chatRoom
func (_m *mockChatRoomRegistry) CreateChatRoom(ctx context.Context, chatRoom *state.ChatRoom) error {
	ret := _m.Called(ctx, chatRoom)

	if len(ret) == 0 {
		panic("no return value specified for CreateChatRoom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *state.ChatRoom) error); ok {
		r0 = rf(ctx, chatRoom)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockChatRoomRegistry_CreateChatRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChatRoom'
type mockChatRoomRegistry_CreateChatRoom_Call struct {
	*mock.Call
}

// CreateChatRoom is a helper method to define mock.On call
//   - ctx context.Context
//   - chatRoom *state.ChatRoom
func (_e *mockChatRoomRegistry_Expecter) CreateChatRoom(ctx interface{}, chatRoom interface{}) *mockChatRoomRegistry_CreateChatRoom_Call {
	return &mockChatRoomRegistry_CreateChatRoom_Call{Call: _e.mock.On("CreateChatRoom", ctx, chatRoom)}
}

func (_c *mockChatRoomRegistry_CreateChatRoom_Call) Run(run func(ctx context.Context, chatRoom *state.ChatRoom)) *mockChatRoomRegistry_CreateChatRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*state.ChatRoom))
	})
	return _c
}

func (_c *mockChatRoomRegistry_CreateChatRoom_Call) Return(_a0 error) *mockChatRoomRegistry_CreateChatRoom_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockChatRoomRegistry_CreateChatRoom_Call) RunAndReturn(run func(context.Context, *state.ChatRoom) error) *mockChatRoomRegistry_CreateChatRoom_Call {
	_c.Call.Return(run)
	return _c
}

// newMockChatRoomRegistry creates a new instance of mockChatRoomRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockChatRoomRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockChatRoomRegistry {
	mock := &mockChatRoomRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.5. DO NOT EDIT.

package foodgroup

import (
	context "context"

	state "github.com/mk6i/retro-aim-server/state"
	mock "github.com/stretchr/testify/mock"
)

// mockICQUserFinder is an autogenerated mock type for the ICQUserFinder type
type mockICQUserFinder struct {
	mock.Mock
}

type mockICQUserFinder_Expecter struct {
	mock *mock.Mock
}

func (_m *mockICQUserFinder) EXPECT() *mockICQUserFinder_Expecter {
	return &mockICQUserFinder_Expecter{mock: &_m.Mock}
}

// FindByICQEmail provides a mock function with given fields: ctx, email
func (_m *mockICQUserFinder) FindByICQEmail(ctx context.Context, email string) (state.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindByICQEmail")
	}

	var r0 state.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (state.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) state.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(state.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockICQUserFinder_FindByICQEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByICQEmail'
type mockICQUserFinder_FindByICQEmail_Call struct {
	*mock.Call
}

// FindByICQEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *mockICQUserFinder_Expecter) FindByICQEmail(ctx interface{}, email interface{}) *mockICQUserFinder_FindByICQEmail_Call {
	return &mockICQUserFinder_FindByICQEmail_Call{Call: _e.mock.On("FindByICQEmail", ctx, email)}
}

func (_c *mockICQUserFinder_FindByICQEmail_Call) Run(run func(ctx context.Context, email string)) *mockICQUserFinder_FindByICQEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockICQUserFinder_FindByICQEmail_Call) Return(_a0 state.User, _a1 error) *mockICQUserFinder_FindByICQEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockICQUserFinder_FindByICQEmail_Call) RunAndReturn(run func(context.Context, string) (state.User, error)) *mockICQUserFinder_FindByICQEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FindByICQInterests provides a mock function with given fields: ctx, code, keywords
func (_m *mockICQUserFinder) FindByICQInterests(ctx context.Context, code uint16, keywords []string) ([]state.User, error) {
	ret := _m.Called(ctx, code, keywords)

	if len(ret) == 0 {
		panic("no return value specified for FindByICQInterests")
	}

	var r0 []state.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint16, []string) ([]state.User, error)); ok {
		return rf(ctx, code, keywords)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint16, []string) []state.User); ok {
		r0 = rf(ctx, code, keywords)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]state.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint16, []string) error); ok {
		r1 = rf(ctx, code, keywords)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockICQUserFinder_FindByICQInterests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByICQInterests'
type mockICQUserFinder_FindByICQInterests_Call struct {
	*mock.Call
}

// FindByICQInterests is a helper method to define mock.On call
//   - ctx context.Context
//   - code uint16
//   - keywords []string
func (_e *mockICQUserFinder_Expecter) FindByICQInterests(ctx interface{}, code interface{}, keywords interface{}) *mockICQUserFinder_FindByICQInterests_Call {
	return &mockICQUserFinder_FindByICQInterests_Call{Call: _e.mock.On("FindByICQInterests", ctx, code, keywords)}
}

func (_c *mockICQUserFinder_FindByICQInterests_Call) Run(run func(ctx context.Context, code uint16, keywords []string)) *mockICQUserFinder_FindByICQInterests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint16), args[2].([]string))
	})
	return _c
}

func (_c *mockICQUserFinder_FindByICQInterests_Call) Return(_a0 []state.User, _a1 error) *mockICQUserFinder_FindByICQInterests_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockICQUserFinder_FindByICQInterests_Call) RunAndReturn(run func(context.Context, uint16, []string) ([]state.User, error)) *mockICQUserFinder_FindByICQInterests_Call {
	_c.Call.Return(run)
	return _c
}

// FindByICQKeyword provides a mock function with given fields: ctx, keyword
func (_m *mockICQUserFinder) FindByICQKeyword(ctx context.Context, keyword string) ([]state.User, error) {
	ret := _m.Called(ctx, keyword)

	if len(ret) == 0 {
		panic("no return value specified for FindByICQKeyword")
	}

	var r0 []state.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]state.User, error)); ok {
		return rf(ctx, keyword)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []state.User); ok {
		r0 = rf(ctx, keyword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]state.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, keyword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockICQUserFinder_FindByICQKeyword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByICQKeyword'
type mockICQUserFinder_FindByICQKeyword_Call struct {
	*mock.Call
}

// FindByICQKeyword is a helper method to define mock.On call
//   - ctx context.Context
//   - keyword string
func (_e *mockICQUserFinder_Expecter) FindByICQKeyword(ctx interface{}, keyword interface{}) *mockICQUserFinder_FindByICQKeyword_Call {
	return &mockICQUserFinder_FindByICQKeyword_Call{Call: _e.mock.On("FindByICQKeyword", ctx, keyword)}
}

func (_c *mockICQUserFinder_FindByICQKeyword_Call) Run(run func(ctx context.Context, keyword string)) *mockICQUserFinder_FindByICQKeyword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockICQUserFinder_FindByICQKeyword_Call) Return(_a0 []state.User, _a1 error) *mockICQUserFinder_FindByICQKeyword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockICQUserFinder_FindByICQKeyword_Call) RunAndReturn(run func(context.Context, string) ([]state.User, error)) *mockICQUserFinder_FindByICQKeyword_Call {
	_c.Call.Return(run)
	return _c
}

// FindByICQName provides a mock function with given fields: ctx, firstName, lastName, nickName
func (_m *mockICQUserFinder) FindByICQName(ctx context.Context, firstName string, lastName string, nickName string) ([]state.User, error) {
	ret := _m.Called(ctx, firstName, lastName, nickName)

	if len(ret) == 0 {
		panic("no return value specified for FindByICQName")
	}

	var r0 []state.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]state.User, error)); ok {
		return rf(ctx, firstName, lastName, nickName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []state.User); ok {
		r0 = rf(ctx, firstName, lastName, nickName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]state.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, firstName, lastName, nickName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockICQUserFinder_FindByICQName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByICQName'
type mockICQUserFinder_FindByICQName_Call struct {
	*mock.Call
}

// FindByICQName is a helper method to define mock.On call
//   - ctx context.Context
//   - firstName string
//   - lastName string
//   - nickName string
func (_e *mockICQUserFinder_Expecter) FindByICQName(ctx interface{}, firstName interface{}, lastName interface{}, nickName interface{}) *mockICQUserFinder_FindByICQName_Call {
	return &mockICQUserFinder_FindByICQName_Call{Call: _e.mock.On("FindByICQName", ctx, firstName, lastName, nickName)}
}

func (_c *mockICQUserFinder_FindByICQName_Call) Run(run func(ctx context.Context, firstName string, lastName string, nickName string)) *mockICQUserFinder_FindByICQName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *mockICQUserFinder_FindByICQName_Call) Return(_a0 []state.User, _a1 error) *mockICQUserFinder_FindByICQName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockICQUserFinder_FindByICQName_Call) RunAndReturn(run func(context.Context, string, string, string) ([]state.User, error)) *mockICQUserFinder_FindByICQName_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUIN provides a mock function with given fields: ctx, UIN
func (_m *mockICQUserFinder) FindByUIN(ctx context.Context, UIN uint32) (state.User, error) {
	ret := _m.Called(ctx, UIN)

	if len(ret) == 0 {
		panic("no return value specified for FindByUIN")
	}

	var r0 state.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) (state.User, error)); ok {
		return rf(ctx, UIN)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) state.User); ok {
		r0 = rf(ctx, UIN)
	} else {
		r0 = ret.Get(0).(state.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, UIN)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockICQUserFinder_FindByUIN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUIN'
type mockICQUserFinder_FindByUIN_Call struct {
	*mock.Call
}

// FindByUIN is a helper method to define mock.On call
//   - ctx context.Context
//   - UIN uint32
func (_e *mockICQUserFinder_Expecter) FindByUIN(ctx interface{}, UIN interface{}) *mockICQUserFinder_FindByUIN_Call {
	return &mockICQUserFinder_FindByUIN_Call{Call: _e.mock.On("FindByUIN", ctx, UIN)}
}

func (_c *mockICQUserFinder_FindByUIN_Call) Run(run func(ctx context.Context, UIN uint32)) *mockICQUserFinder_FindByUIN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32))
	})
	return _c
}

func (_c *mockICQUserFinder_FindByUIN_Call) Return(_a0 state.User, _a1 error) *mockICQUserFinder_FindByUIN_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockICQUserFinder_FindByUIN_Call) RunAndReturn(run func(context.Context, uint32) (state.User, error)) *mockICQUserFinder_FindByUIN_Call {
	_c.Call.Return(run)
	return _c
}

// newMockICQUserFinder creates a new instance of mockICQUserFinder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockICQUserFinder(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockICQUserFinder {
	mock := &mockICQUserFinder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.5. DO NOT EDIT.

package foodgroup

import (
	context "context"

	state "github.com/mk6i/retro-aim-server/state"
	mock "github.com/stretchr/testify/mock"
)

// mockICQUserUpdater is an autogenerated mock type for the ICQUserUpdater type
type mockICQUserUpdater struct {
	mock.Mock
}

type mockICQUserUpdater_Expecter struct {
	mock *mock.Mock
}

func (_m *mockICQUserUpdater) EXPECT() *mockICQUserUpdater_Expecter {
	return &mockICQUserUpdater_Expecter{mock: &_m.Mock}
}

// SetAffiliations provides a mock function with given fields: ctx, name, data
func (_m *mockICQUserUpdater) SetAffiliations(ctx context.Context, name state.IdentScreenName, data state.ICQAffiliations) error {
	ret := _m.Called(ctx, name, data)

	if len(ret) == 0 {
		panic("no return value specified for SetAffiliations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, state.IdentScreenName, state.ICQAffiliations) error); ok {
		r0 = rf(ctx, name, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockICQUserUpdater_SetAffiliations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAffiliations'
type mockICQUserUpdater_SetAffiliations_Call struct {
	*mock.Call
}

// SetAffiliations is a helper method to define mock.On call
//   - ctx context.Context
//   - name state.IdentScreenName
//   - data state.ICQAffiliations
func (_e *mockICQUserUpdater_Expecter) SetAffiliations(ctx interface{}, name interface{}, data interface{}) *mockICQUserUpdater_SetAffiliations_Call {
	return &mockICQUserUpdater_SetAffiliations_Call{Call: _e.mock.On("SetAffiliations", ctx, name, data)}
}

func (_c *mockICQUserUpdater_SetAffiliations_Call) Run(run func(ctx context.Context, name state.IdentScreenName, data state.ICQAffiliations)) *mockICQUserUpdater_SetAffiliations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(state.IdentScreenName), args[2].(state.ICQAffiliations))
	})
	return _c
}

func (_c *mockICQUserUpdater_SetAffiliations_Call) Return(_a0 error) *mockICQUserUpdater_SetAffiliations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockICQUserUpdater_SetAffiliations_Call) RunAndReturn(run func(context.Context, state.IdentScreenName, state.ICQAffiliations) error) *mockICQUserUpdater_SetAffiliations_Call {
	_c.Call.Return(run)
	return _c
}

// SetBasicInfo provides a mock function with given fields: ctx, name, data
func (_m *mockICQUserUpdater) SetBasicInfo(ctx context.Context, name state.IdentScreenName, data state.ICQBasicInfo) error {
	ret := _m.Called(ctx, name, data)

	if len(ret) == 0 {
		panic("no return value specified for SetBasicInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, state.IdentScreenName, state.ICQBasicInfo) error); ok {
		r0 = rf(ctx, name, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockICQUserUpdater_SetBasicInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBasicInfo'
type mockICQUserUpdater_SetBasicInfo_Call struct {
	*mock.Call
}

// SetBasicInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - name state.IdentScreenName
//   - data state.ICQBasicInfo
func (_e *mockICQUserUpdater_Expecter) SetBasicInfo(ctx interface{}, name interface{}, data interface{}) *mockICQUserUpdater_SetBasicInfo_Call {
	return &mockICQUserUpdater_SetBasicInfo_Call{Call: _e.mock.On("SetBasicInfo", ctx, name, data)}
}

func (_c *mockICQUserUpdater_SetBasicInfo_Call) Run(run func(ctx context.Context, name state.IdentScreenName, data state.ICQBasicInfo)) *mockICQUserUpdater_SetBasicInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(state.IdentScreenName), args[2].(state.ICQBasicInfo))
	})
	return _c
}

func (_c *mockICQUserUpdater_SetBasicInfo_Call) Return(_a0 error) *mockICQUserUpdater_SetBasicInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockICQUserUpdater_SetBasicInfo_Call) RunAndReturn(run func(context.Context, state.IdentScreenName, state.ICQBasicInfo) error) *mockICQUserUpdater_SetBasicInfo_Call {
	_c.Call.Return(run)
	return _c
}

// SetInterests provides a mock function with given fields: ctx, name, data
func (_m *mockICQUserUpdater) SetInterests(ctx context.Context, name state.IdentScreenName, data state.ICQInterests) error {
	ret := _m.Called(ctx, name, data)

	if len(ret) == 0 {
		panic("no return value specified for SetInterests")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, state.IdentScreenName, state.ICQInterests) error); ok {
		r0 = rf(ctx, name, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockICQUserUpdater_SetInterests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetInterests'
type mockICQUserUpdater_SetInterests_Call struct {
	*mock.Call
}

// SetInterests is a helper method to define mock.On call
//   - ctx context.Context
//   - name state.IdentScreenName
//   - data state.ICQInterests
func (_e *mockICQUserUpdater_Expecter) SetInterests(ctx interface{}, name interface{}, data interface{}) *mockICQUserUpdater_SetInterests_Call {
	return &mockICQUserUpdater_SetInterests_Call{Call: _e.mock.On("SetInterests", ctx, name, data)}
}

func (_c *mockICQUserUpdater_SetInterests_Call) Run(run func(ctx context.Context, name state.IdentScreenName, data state.ICQInterests)) *mockICQUserUpdater_SetInterests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(state.IdentScreenName), args[2].(state.ICQInterests))
	})
	return _c
}

func (_c *mockICQUserUpdater_SetInterests_Call) Return(_a0 error) *mockICQUserUpdater_SetInterests_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockICQUserUpdater_SetInterests_Call) RunAndReturn(run func(context.Context, state.IdentScreenName, state.ICQInterests) error) *mockICQUserUpdater_SetInterests_Call {
	_c.Call.Return(run)
	return _c
}

// SetMoreInfo provides a mock function with given fields: ctx, name, data
func (_m *mockICQUserUpdater) SetMoreInfo(ctx context.Context, name state.IdentScreenName, data state.ICQMoreInfo) error {
	ret := _m.Called(ctx, name, data)

	if len(ret) == 0 {
		panic("no return value specified for SetMoreInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, state.IdentScreenName, state.ICQMoreInfo) error); ok {
		r0 = rf(ctx, name, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockICQUserUpdater_SetMoreInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMoreInfo'
type mockICQUserUpdater_SetMoreInfo_Call struct {
	*mock.Call
}

// SetMoreInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - name state.IdentScreenName
//   - data state.ICQMoreInfo
func (_e *mockICQUserUpdater_Expecter) SetMoreInfo(ctx interface{}, name interface{}, data interface{}) *mockICQUserUpdater_SetMoreInfo_Call {
	return &mockICQUserUpdater_SetMoreInfo_Call{Call: _e.mock.On("SetMoreInfo", ctx, name, data)}
}

func (_c *mockICQUserUpdater_SetMoreInfo_Call) Run(run func(ctx context.Context, name state.IdentScreenName, data state.ICQMoreInfo)) *mockICQUserUpdater_SetMoreInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(state.IdentScreenName), args[2].(state.ICQMoreInfo))
	})
	return _c
}

func (_c *mockICQUserUpdater_SetMoreInfo_Call) Return(_a0 error) *mockICQUserUpdater_SetMoreInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockICQUserUpdater_SetMoreInfo_Call) RunAndReturn(run func(context.Context, state.IdentScreenName, state.ICQMoreInfo) error) *mockICQUserUpdater_SetMoreInfo_Call {
	_c.Call.Return(run)
	return _c
}

// SetUserNotes provides a mock function with given fields: ctx, name, data
func (_m *mockICQUserUpdater) SetUserNotes(ctx context.Context, name state.IdentScreenName, data state.ICQUserNotes) error {
	ret := _m.Called(ctx, name, data)

	if len(ret) == 0 {
		panic("no return value specified for SetUserNotes")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, state.IdentScreenName, state.ICQUserNotes) error); ok {
		r0 = rf(ctx, name, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockICQUserUpdater_SetUserNotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUserNotes'
type mockICQUserUpdater_SetUserNotes_Call struct {
	*mock.Call
}

// SetUserNotes is a helper method to define mock.On call
//   - ctx context.Context
//   - name state.IdentScreenName
//   - data state.ICQUserNotes
func (_e *mockICQUserUpdater_Expecter) SetUserNotes(ctx interface{}, name interface{}, data interface{}) *mockICQUserUpdater_SetUserNotes_Call {
	return &mockICQUserUpdater_SetUserNotes_Call{Call: _e.mock.On("SetUserNotes", ctx, name, data)}
}

func (_c *mockICQUserUpdater_SetUserNotes_Call) Run(run func(ctx context.Context, name state.IdentScreenName, data state.ICQUserNotes)) *mockICQUserUpdater_SetUserNotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(state.IdentScreenName), args[2].(state.ICQUserNotes))
	})
	return _c
}

func (_c *mockICQUserUpdater_SetUserNotes_Call) Return(_a0 error) *mockICQUserUpdater_SetUserNotes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockICQUserUpdater_SetUserNotes_Call) RunAndReturn(run func(context.Context, state.IdentScreenName, state.ICQUserNotes) error) *mockICQUserUpdater_SetUserNotes_Call {
	_c.Call.Return(run)
	return _c
}

// SetWorkInfo provides a mock function with given fields: ctx, name, data
func (_m *mockICQUserUpdater) SetWorkInfo(ctx context.Context, name state.IdentScreenName, data state.ICQWorkInfo) error {
	ret := _m.Called(ctx, name, data)

	if len(ret) == 0 {
		panic("no return value specified for SetWorkInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, state.IdentScreenName, state.ICQWorkInfo) error); ok {
		r0 = rf(ctx, name, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockICQUserUpdater_SetWorkInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWorkInfo'
type mockICQUserUpdater_SetWorkInfo_Call struct {
	*mock.Call
}

// SetWorkInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - name state.IdentScreenName
//   - data state.ICQWorkInfo
func (_e *mockICQUserUpdater_Expecter) SetWorkInfo(ctx interface{}, name interface{}, data interface{}) *mockICQUserUpdater_SetWorkInfo_Call {
	return &mockICQUserUpdater_SetWorkInfo_Call{Call: _e.mock.On("SetWorkInfo", ctx, name, data)}
}

func (_c *mockICQUserUpdater_SetWorkInfo_Call) Run(run func(ctx context.Context, name state.IdentScreenName, data state.ICQWorkInfo)) *mockICQUserUpdater_SetWorkInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(state.IdentScreenName), args[2].(state.ICQWorkInfo))
	})
	return _c
}

func (_c *mockICQUserUpdater_SetWorkInfo_Call) Return(_a0 error) *mockICQUserUpdater_SetWorkInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockICQUserUpdater_SetWorkInfo_Call) RunAndReturn(run func(context.Context, state.IdentScreenName, state.ICQWorkInfo) error) *mockICQUserUpdater_SetWorkInfo_Call {
	_c.Call.Return(run)
	return _c
}

// newMockICQUserUpdater creates a new instance of mockICQUserUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockICQUserUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockICQUserUpdater {
	mock := &mockICQUserUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

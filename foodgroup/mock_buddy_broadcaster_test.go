// Code generated by mockery v2.53.5. DO NOT EDIT.

package foodgroup

import (
	context "context"

	state "github.com/mk6i/retro-aim-server/state"
	mock "github.com/stretchr/testify/mock"
)

// mockbuddyBroadcaster is an autogenerated mock type for the buddyBroadcaster type
type mockbuddyBroadcaster struct {
	mock.Mock
}

type mockbuddyBroadcaster_Expecter struct {
	mock *mock.Mock
}

func (_m *mockbuddyBroadcaster) EXPECT() *mockbuddyBroadcaster_Expecter {
	return &mockbuddyBroadcaster_Expecter{mock: &_m.Mock}
}

// BroadcastBuddyArrived provides a mock function with given fields: ctx, sess
func (_m *mockbuddyBroadcaster) BroadcastBuddyArrived(ctx context.Context, sess *state.Session) error {
	ret := _m.Called(ctx, sess)

	if len(ret) == 0 {
		panic("no return value specified for BroadcastBuddyArrived")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *state.Session) error); ok {
		r0 = rf(ctx, sess)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockbuddyBroadcaster_BroadcastBuddyArrived_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BroadcastBuddyArrived'
type mockbuddyBroadcaster_BroadcastBuddyArrived_Call struct {
	*mock.Call
}

// BroadcastBuddyArrived is a helper method to define mock.On call
//   - ctx context.Context
//   - sess *state.Session
func (_e *mockbuddyBroadcaster_Expecter) BroadcastBuddyArrived(ctx interface{}, sess interface{}) *mockbuddyBroadcaster_BroadcastBuddyArrived_Call {
	return &mockbuddyBroadcaster_BroadcastBuddyArrived_Call{Call: _e.mock.On("BroadcastBuddyArrived", ctx, sess)}
}

func (_c *mockbuddyBroadcaster_BroadcastBuddyArrived_Call) Run(run func(ctx context.Context, sess *state.Session)) *mockbuddyBroadcaster_BroadcastBuddyArrived_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*state.Session))
	})
	return _c
}

func (_c *mockbuddyBroadcaster_BroadcastBuddyArrived_Call) Return(_a0 error) *mockbuddyBroadcaster_BroadcastBuddyArrived_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockbuddyBroadcaster_BroadcastBuddyArrived_Call) RunAndReturn(run func(context.Context, *state.Session) error) *mockbuddyBroadcaster_BroadcastBuddyArrived_Call {
	_c.Call.Return(run)
	return _c
}

// BroadcastBuddyDeparted provides a mock function with given fields: ctx, sess
func (_m *mockbuddyBroadcaster) BroadcastBuddyDeparted(ctx context.Context, sess *state.Session) error {
	ret := _m.Called(ctx, sess)

	if len(ret) == 0 {
		panic("no return value specified for BroadcastBuddyDeparted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *state.Session) error); ok {
		r0 = rf(ctx, sess)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockbuddyBroadcaster_BroadcastBuddyDeparted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BroadcastBuddyDeparted'
type mockbuddyBroadcaster_BroadcastBuddyDeparted_Call struct {
	*mock.Call
}

// BroadcastBuddyDeparted is a helper method to define mock.On call
//   - ctx context.Context
//   - sess *state.Session
func (_e *mockbuddyBroadcaster_Expecter) BroadcastBuddyDeparted(ctx interface{}, sess interface{}) *mockbuddyBroadcaster_BroadcastBuddyDeparted_Call {
	return &mockbuddyBroadcaster_BroadcastBuddyDeparted_Call{Call: _e.mock.On("BroadcastBuddyDeparted", ctx, sess)}
}

func (_c *mockbuddyBroadcaster_BroadcastBuddyDeparted_Call) Run(run func(ctx context.Context, sess *state.Session)) *mockbuddyBroadcaster_BroadcastBuddyDeparted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*state.Session))
	})
	return _c
}

func (_c *mockbuddyBroadcaster_BroadcastBuddyDeparted_Call) Return(_a0 error) *mockbuddyBroadcaster_BroadcastBuddyDeparted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockbuddyBroadcaster_BroadcastBuddyDeparted_Call) RunAndReturn(run func(context.Context, *state.Session) error) *mockbuddyBroadcaster_BroadcastBuddyDeparted_Call {
	_c.Call.Return(run)
	return _c
}

// BroadcastVisibility provides a mock function with given fields: ctx, you, filter, sendDepartures
func (_m *mockbuddyBroadcaster) BroadcastVisibility(ctx context.Context, you *state.Session, filter []state.IdentScreenName, sendDepartures bool) error {
	ret := _m.Called(ctx, you, filter, sendDepartures)

	if len(ret) == 0 {
		panic("no return value specified for BroadcastVisibility")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *state.Session, []state.IdentScreenName, bool) error); ok {
		r0 = rf(ctx, you, filter, sendDepartures)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockbuddyBroadcaster_BroadcastVisibility_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BroadcastVisibility'
type mockbuddyBroadcaster_BroadcastVisibility_Call struct {
	*mock.Call
}

// BroadcastVisibility is a helper method to define mock.On call
//   - ctx context.Context
//   - you *state.Session
//   - filter []state.IdentScreenName
//   - sendDepartures bool
func (_e *mockbuddyBroadcaster_Expecter) BroadcastVisibility(ctx interface{}, you interface{}, filter interface{}, sendDepartures interface{}) *mockbuddyBroadcaster_BroadcastVisibility_Call {
	return &mockbuddyBroadcaster_BroadcastVisibility_Call{Call: _e.mock.On("BroadcastVisibility", ctx, you, filter, sendDepartures)}
}

func (_c *mockbuddyBroadcaster_BroadcastVisibility_Call) Run(run func(ctx context.Context, you *state.Session, filter []state.IdentScreenName, sendDepartures bool)) *mockbuddyBroadcaster_BroadcastVisibility_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*state.Session), args[2].([]state.IdentScreenName), args[3].(bool))
	})
	return _c
}

func (_c *mockbuddyBroadcaster_BroadcastVisibility_Call) Return(_a0 error) *mockbuddyBroadcaster_BroadcastVisibility_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockbuddyBroadcaster_BroadcastVisibility_Call) RunAndReturn(run func(context.Context, *state.Session, []state.IdentScreenName, bool) error) *mockbuddyBroadcaster_BroadcastVisibility_Call {
	_c.Call.Return(run)
	return _c
}

// newMockbuddyBroadcaster creates a new instance of mockbuddyBroadcaster. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockbuddyBroadcaster(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockbuddyBroadcaster {
	mock := &mockbuddyBroadcaster{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

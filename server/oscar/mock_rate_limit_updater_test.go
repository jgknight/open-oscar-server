// Code generated by mockery v2.53.5. DO NOT EDIT.

package oscar

import (
	context "context"

	state "github.com/mk6i/retro-aim-server/state"
	mock "github.com/stretchr/testify/mock"

	time "time"

	wire "github.com/mk6i/retro-aim-server/wire"
)

// mockRateLimitUpdater is an autogenerated mock type for the RateLimitUpdater type
type mockRateLimitUpdater struct {
	mock.Mock
}

type mockRateLimitUpdater_Expecter struct {
	mock *mock.Mock
}

func (_m *mockRateLimitUpdater) EXPECT() *mockRateLimitUpdater_Expecter {
	return &mockRateLimitUpdater_Expecter{mock: &_m.Mock}
}

// RateLimitUpdates provides a mock function with given fields: ctx, sess, now
func (_m *mockRateLimitUpdater) RateLimitUpdates(ctx context.Context, sess *state.Session, now time.Time) []wire.SNACMessage {
	ret := _m.Called(ctx, sess, now)

	if len(ret) == 0 {
		panic("no return value specified for RateLimitUpdates")
	}

	var r0 []wire.SNACMessage
	if rf, ok := ret.Get(0).(func(context.Context, *state.Session, time.Time) []wire.SNACMessage); ok {
		r0 = rf(ctx, sess, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]wire.SNACMessage)
		}
	}

	return r0
}

// mockRateLimitUpdater_RateLimitUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RateLimitUpdates'
type mockRateLimitUpdater_RateLimitUpdates_Call struct {
	*mock.Call
}

// RateLimitUpdates is a helper method to define mock.On call
//   - ctx context.Context
//   - sess *state.Session
//   - now time.Time
func (_e *mockRateLimitUpdater_Expecter) RateLimitUpdates(ctx interface{}, sess interface{}, now interface{}) *mockRateLimitUpdater_RateLimitUpdates_Call {
	return &mockRateLimitUpdater_RateLimitUpdates_Call{Call: _e.mock.On("RateLimitUpdates", ctx, sess, now)}
}

func (_c *mockRateLimitUpdater_RateLimitUpdates_Call) Run(run func(ctx context.Context, sess *state.Session, now time.Time)) *mockRateLimitUpdater_RateLimitUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*state.Session), args[2].(time.Time))
	})
	return _c
}

func (_c *mockRateLimitUpdater_RateLimitUpdates_Call) Return(_a0 []wire.SNACMessage) *mockRateLimitUpdater_RateLimitUpdates_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockRateLimitUpdater_RateLimitUpdates_Call) RunAndReturn(run func(context.Context, *state.Session, time.Time) []wire.SNACMessage) *mockRateLimitUpdater_RateLimitUpdates_Call {
	_c.Call.Return(run)
	return _c
}

// newMockRateLimitUpdater creates a new instance of mockRateLimitUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockRateLimitUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockRateLimitUpdater {
	mock := &mockRateLimitUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

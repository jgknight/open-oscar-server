// Code generated by mockery v2.53.5. DO NOT EDIT.

package toc

import (
	context "context"

	wire "github.com/mk6i/retro-aim-server/wire"
	mock "github.com/stretchr/testify/mock"
)

// mockDirSearchService is an autogenerated mock type for the DirSearchService type
type mockDirSearchService struct {
	mock.Mock
}

type mockDirSearchService_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDirSearchService) EXPECT() *mockDirSearchService_Expecter {
	return &mockDirSearchService_Expecter{mock: &_m.Mock}
}

// InfoQuery provides a mock function with given fields: _a0, inFrame, inBody
func (_m *mockDirSearchService) InfoQuery(_a0 context.Context, inFrame wire.SNACFrame, inBody wire.SNAC_0x0F_0x02_InfoQuery) (wire.SNACMessage, error) {
	ret := _m.Called(_a0, inFrame, inBody)

	if len(ret) == 0 {
		panic("no return value specified for InfoQuery")
	}

	var r0 wire.SNACMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, wire.SNACFrame, wire.SNAC_0x0F_0x02_InfoQuery) (wire.SNACMessage, error)); ok {
		return rf(_a0, inFrame, inBody)
	}
	if rf, ok := ret.Get(0).(func(context.Context, wire.SNACFrame, wire.SNAC_0x0F_0x02_InfoQuery) wire.SNACMessage); ok {
		r0 = rf(_a0, inFrame, inBody)
	} else {
		r0 = ret.Get(0).(wire.SNACMessage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, wire.SNACFrame, wire.SNAC_0x0F_0x02_InfoQuery) error); ok {
		r1 = rf(_a0, inFrame, inBody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDirSearchService_InfoQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InfoQuery'
type mockDirSearchService_InfoQuery_Call struct {
	*mock.Call
}

// InfoQuery is a helper method to define mock.On call
//   - _a0 context.Context
//   - inFrame wire.SNACFrame
//   - inBody wire.SNAC_0x0F_0x02_InfoQuery
func (_e *mockDirSearchService_Expecter) InfoQuery(_a0 interface{}, inFrame interface{}, inBody interface{}) *mockDirSearchService_InfoQuery_Call {
	return &mockDirSearchService_InfoQuery_Call{Call: _e.mock.On("InfoQuery", _a0, inFrame, inBody)}
}

func (_c *mockDirSearchService_InfoQuery_Call) Run(run func(_a0 context.Context, inFrame wire.SNACFrame, inBody wire.SNAC_0x0F_0x02_InfoQuery)) *mockDirSearchService_InfoQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(wire.SNACFrame), args[2].(wire.SNAC_0x0F_0x02_InfoQuery))
	})
	return _c
}

func (_c *mockDirSearchService_InfoQuery_Call) Return(_a0 wire.SNACMessage, _a1 error) *mockDirSearchService_InfoQuery_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDirSearchService_InfoQuery_Call) RunAndReturn(run func(context.Context, wire.SNACFrame, wire.SNAC_0x0F_0x02_InfoQuery) (wire.SNACMessage, error)) *mockDirSearchService_InfoQuery_Call {
	_c.Call.Return(run)
	return _c
}

// newMockDirSearchService creates a new instance of mockDirSearchService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDirSearchService(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDirSearchService {
	mock := &mockDirSearchService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

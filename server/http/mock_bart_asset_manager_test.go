// Code generated by mockery v2.53.3. DO NOT EDIT.

package http

import (
	context "context"

	state "github.com/mk6i/retro-aim-server/state"
	mock "github.com/stretchr/testify/mock"
)

// mockBARTAssetManager is an autogenerated mock type for the BARTAssetManager type
type mockBARTAssetManager struct {
	mock.Mock
}

type mockBARTAssetManager_Expecter struct {
	mock *mock.Mock
}

func (_m *mockBARTAssetManager) EXPECT() *mockBARTAssetManager_Expecter {
	return &mockBARTAssetManager_Expecter{mock: &_m.Mock}
}

// BARTItem provides a mock function with given fields: ctx, hash
func (_m *mockBARTAssetManager) BARTItem(ctx context.Context, hash []byte) ([]byte, error) {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for BARTItem")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) ([]byte, error)); ok {
		return rf(ctx, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) []byte); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBARTAssetManager_BARTItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BARTItem'
type mockBARTAssetManager_BARTItem_Call struct {
	*mock.Call
}

// BARTItem is a helper method to define mock.On call
//   - ctx context.Context
//   - hash []byte
func (_e *mockBARTAssetManager_Expecter) BARTItem(ctx interface{}, hash interface{}) *mockBARTAssetManager_BARTItem_Call {
	return &mockBARTAssetManager_BARTItem_Call{Call: _e.mock.On("BARTItem", ctx, hash)}
}

func (_c *mockBARTAssetManager_BARTItem_Call) Run(run func(ctx context.Context, hash []byte)) *mockBARTAssetManager_BARTItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *mockBARTAssetManager_BARTItem_Call) Return(_a0 []byte, _a1 error) *mockBARTAssetManager_BARTItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBARTAssetManager_BARTItem_Call) RunAndReturn(run func(context.Context, []byte) ([]byte, error)) *mockBARTAssetManager_BARTItem_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBARTItem provides a mock function with given fields: ctx, hash
func (_m *mockBARTAssetManager) DeleteBARTItem(ctx context.Context, hash []byte) error {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBARTItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) error); ok {
		r0 = rf(ctx, hash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockBARTAssetManager_DeleteBARTItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBARTItem'
type mockBARTAssetManager_DeleteBARTItem_Call struct {
	*mock.Call
}

// DeleteBARTItem is a helper method to define mock.On call
//   - ctx context.Context
//   - hash []byte
func (_e *mockBARTAssetManager_Expecter) DeleteBARTItem(ctx interface{}, hash interface{}) *mockBARTAssetManager_DeleteBARTItem_Call {
	return &mockBARTAssetManager_DeleteBARTItem_Call{Call: _e.mock.On("DeleteBARTItem", ctx, hash)}
}

func (_c *mockBARTAssetManager_DeleteBARTItem_Call) Run(run func(ctx context.Context, hash []byte)) *mockBARTAssetManager_DeleteBARTItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *mockBARTAssetManager_DeleteBARTItem_Call) Return(_a0 error) *mockBARTAssetManager_DeleteBARTItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockBARTAssetManager_DeleteBARTItem_Call) RunAndReturn(run func(context.Context, []byte) error) *mockBARTAssetManager_DeleteBARTItem_Call {
	_c.Call.Return(run)
	return _c
}

// InsertBARTItem provides a mock function with given fields: ctx, hash, blob, itemType
func (_m *mockBARTAssetManager) InsertBARTItem(ctx context.Context, hash []byte, blob []byte, itemType uint16) error {
	ret := _m.Called(ctx, hash, blob, itemType)

	if len(ret) == 0 {
		panic("no return value specified for InsertBARTItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, []byte, uint16) error); ok {
		r0 = rf(ctx, hash, blob, itemType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockBARTAssetManager_InsertBARTItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertBARTItem'
type mockBARTAssetManager_InsertBARTItem_Call struct {
	*mock.Call
}

// InsertBARTItem is a helper method to define mock.On call
//   - ctx context.Context
//   - hash []byte
//   - blob []byte
//   - itemType uint16
func (_e *mockBARTAssetManager_Expecter) InsertBARTItem(ctx interface{}, hash interface{}, blob interface{}, itemType interface{}) *mockBARTAssetManager_InsertBARTItem_Call {
	return &mockBARTAssetManager_InsertBARTItem_Call{Call: _e.mock.On("InsertBARTItem", ctx, hash, blob, itemType)}
}

func (_c *mockBARTAssetManager_InsertBARTItem_Call) Run(run func(ctx context.Context, hash []byte, blob []byte, itemType uint16)) *mockBARTAssetManager_InsertBARTItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].([]byte), args[3].(uint16))
	})
	return _c
}

func (_c *mockBARTAssetManager_InsertBARTItem_Call) Return(_a0 error) *mockBARTAssetManager_InsertBARTItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockBARTAssetManager_InsertBARTItem_Call) RunAndReturn(run func(context.Context, []byte, []byte, uint16) error) *mockBARTAssetManager_InsertBARTItem_Call {
	_c.Call.Return(run)
	return _c
}

// ListBARTItems provides a mock function with given fields: ctx, itemType
func (_m *mockBARTAssetManager) ListBARTItems(ctx context.Context, itemType uint16) ([]state.BARTItem, error) {
	ret := _m.Called(ctx, itemType)

	if len(ret) == 0 {
		panic("no return value specified for ListBARTItems")
	}

	var r0 []state.BARTItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint16) ([]state.BARTItem, error)); ok {
		return rf(ctx, itemType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint16) []state.BARTItem); ok {
		r0 = rf(ctx, itemType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]state.BARTItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint16) error); ok {
		r1 = rf(ctx, itemType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBARTAssetManager_ListBARTItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBARTItems'
type mockBARTAssetManager_ListBARTItems_Call struct {
	*mock.Call
}

// ListBARTItems is a helper method to define mock.On call
//   - ctx context.Context
//   - itemType uint16
func (_e *mockBARTAssetManager_Expecter) ListBARTItems(ctx interface{}, itemType interface{}) *mockBARTAssetManager_ListBARTItems_Call {
	return &mockBARTAssetManager_ListBARTItems_Call{Call: _e.mock.On("ListBARTItems", ctx, itemType)}
}

func (_c *mockBARTAssetManager_ListBARTItems_Call) Run(run func(ctx context.Context, itemType uint16)) *mockBARTAssetManager_ListBARTItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint16))
	})
	return _c
}

func (_c *mockBARTAssetManager_ListBARTItems_Call) Return(_a0 []state.BARTItem, _a1 error) *mockBARTAssetManager_ListBARTItems_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBARTAssetManager_ListBARTItems_Call) RunAndReturn(run func(context.Context, uint16) ([]state.BARTItem, error)) *mockBARTAssetManager_ListBARTItems_Call {
	_c.Call.Return(run)
	return _c
}

// newMockBARTAssetManager creates a new instance of mockBARTAssetManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockBARTAssetManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockBARTAssetManager {
	mock := &mockBARTAssetManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
